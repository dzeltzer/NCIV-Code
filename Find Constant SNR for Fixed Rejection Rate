library(utils)
#library(doParallel)

get_rej_rate <- function(sg,
                         scenario_func,
                         n_iterations,
                         n_observations,
                         curr_alpha,
                         single_nc_power,
                         ntree,
                         n_permutations,
                         rejection_rate,
                         variables_to_remove,
                         ...) { # Additional arguments to be passed to scenario_func
  print(sprintf("calculating rejection rate for sg= %f", sg))
  
  rej_vec <- ( 
    foreach (curr_iter = 1:n_iterations,
             .packages = c("dplyr","foreach", "ggplot2"), # ggplot can be removed after debugging
             .export = c("permutations.test.for.lm", "run.rf.multiple.negative.controls","get_NC_matrix","prepare_z_NC",
                         "calculate.visualize.p.values","create_interactions_multi_nc", "create_degree_nc", "get_nc_col"),
             .combine ="cbind") %do% 
      {
        (permutations.test.for.lm(data= scenario_func(n= n_observations, 
                                                      sg= sg,
                                                      nc_power=single_nc_power*number_of_good_ncs,
                                                      nc_power_split="uniform", 
                                                      alpha= curr_alpha,
                                                      is_null_scenario = F,
                                                      ...),
                                #  (n= n_observations, sg = sg, alpha = curr_alpha, nc_power...),
                                  instrument_form= "iv",
                                  instrument= "iv", 
                                  controls= c("t"),
                                  weights= NULL,
                                  variables_to_remove= variables_to_remove,
                                  title = sprintf("good_nc= %s, total_nc= %s, alpha = %s",
                                                  curr_n_number_of_good_ncs_value, number_of_all_ncs_value,
                                                  curr_alpha),
                                  n_permutations= n_permutations, 
                                  conditioned = T, OOB= T, saveplot=F,
                                  mtry_ratio= 1/3, ntree=ntree) <= rejection_rate)
      }
  )
  mean_r <- mean(rej_vec)
  print(sprintf("rejection rate for sg= %f is: %f", sg, mean_r))
  return(mean_r)
}



# target p (for good_nc, all_nc) => get sg => find mse by sg for the scenario
# decide on target p 
target_p <- 0.5
number_of_all_ncs_value <- 20
n_iterations = 100
n_observations =1000

alpha_values <- c(0.25) #0, 0.25 ,0.5, 0.75, 1
number_of_good_ncs_values <- c(2,4,7,10)

curr_alpha <- 0

number_of_good_ncs <- 10
curr_n_number_of_good_ncs_value <- 10
number_of_bad_ncs = number_of_all_ncs_value- number_of_good_ncs
variables_to_remove <- c("h", "y", "iv")


#########################################

single_nc_power <- 5
n_iterations <- 20
number_of_all_ncs_value <- 20
variables_to_remove <- c("h", "y", "iv")

res_sgs_for_rr_05_deg_1 <-
  foreach (curr_alpha = alpha_values,
           .packages = c("dplyr", "foreach"),
           .export = c("create_interactions_multi_nc",
                       "create_degree_nc",
                       "get_rej_rate",
                       "permutations.test.for.lm",
                       "n_iterations", "n_observations", "single_nc_power"),
           .combine = "cbind") %do% {
             cat("curr alpha is: ", curr_alpha, "\n")

             foreach (number_of_good_ncs = number_of_good_ncs_values,
                      .packages = c("dplyr", "foreach"),
                      .combine = "cbind",
                      .export = c("curr_alpha", "n_iterations", "n_observations", "single_nc_power")) %do% {
                        
                        number_of_bad_ncs = number_of_all_ncs_value- number_of_good_ncs
                        cat("curr number_of_good_ncs_value is: ", number_of_good_ncs, "\n")
                        toler <- 0.1 #toler <- 0.0025*(number_of_good_ncs_value)^(2/3)
                        
                        
                        cat("tol is", toler, "\n")
                        cat("single nc is", single_nc_power, "\n")
                        root_res <- uniroot(f = function(sg,
                                                         n_iterations,
                                                         n_observations,
                                                         curr_alpha,
                                                         ...) {
                          return(get_rej_rate(sg,
                                              create_degree_nc,
                                              n_iterations,
                                              n_observations,
                                              curr_alpha,
                                              single_nc_power,
                                              ntree,
                                              n_permutations,
                                              rejection_rate,
                                              variables_to_remove,
                                              number_of_good_ncs,
                                              number_of_bad_ncs
                          )- target_p)
                        },
                        interval = c(0,100),
                        tol = toler,
                        extendInt = "downX",
                        trace = 5,
                        n_iterations = n_iterations,
                        n_observations = n_observations,
                        single_nc_power = single_nc_power,
                        curr_alpha = curr_alpha
                        )
                        root_res[["curr_alpha"]] <- curr_alpha
                        root_res[["single_nc_power"]] <- single_nc_power
                        root_res[["number_of_good_ncs_values"]] <- number_of_good_ncs
                        print(root_res)
                        write.csv(root_res, cat("root_res", single_nc_power, ".csv"))
                      }
           }
